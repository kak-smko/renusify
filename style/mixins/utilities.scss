@use "sass:list";
@use "sass:meta";
@use "../variables/base";

@use "sass:map";
@mixin build-utility($utility, $breakpointName) {
  $values: map.get($utility, values);

  @if meta.type-of($values) == "string" or meta.type-of(list.nth($values, 1)) != "list" {
    $values: list.zip($values, $values)
  }

  @each $value in $values {
    $properties: map.get($utility, property);

    @if meta.type-of($properties) == 'string' {
      $properties: list.append((), $properties)
    }

    @if meta.type-of($properties) == 'map' {
      @each $dir in $properties {
        $mixin: list.nth($dir, 1);

        @if $mixin == 'ltr' {
          .app-ltr {
            @include build-utility-body($utility, list.nth($dir, 2), $value, $breakpointName)
          }
        } @else if $mixin == 'rtl' {
          .app-rtl {
            @include build-utility-body($utility, list.nth($dir, 2), $value, $breakpointName)
          }
        } @else {
          @error 'Only RTL and LTR are supported'
        }
      }

    } @else {
      .#{base.$prefix}app {
        @include build-utility-body($utility, $properties, $value, $breakpointName)
      }
    }
  }
}

@mixin build-utility-body($utility, $properties, $value, $breakpointName) {
  $property-class: map.get($utility, class);
  $property-class: if($property-class, $property-class, list.nth($properties, 1));

  $property-class-modifier: if(list.nth($value, 1), "-" + list.nth($value, 1), "");

  $value: list.nth($value, 2);

  .#{$property-class + $breakpointName + $property-class-modifier} {
    @for $i from 1 through list.length($properties) {
      $property: list.nth($properties, $i);
      $val: $value;
      @if meta.type-of($value) == 'list' and list.length($properties) == list.length($value) {
        $val: list.nth($value, $i)
      }
      @if ($val != false) {
        $unimportant: map.get($utility, unimportant);
        #{$property}: $val if(list.index($unimportant, $property), null, !important)
      }
    }
  }
}
